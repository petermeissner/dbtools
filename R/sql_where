
#' Title
#'
#' @param ...
#' @param .params
#' @param con
#'
#' @return
#' @export
#'
#' @examples
sql_where <-
  function(..., .params = NULL, con = DBI::ANSI(), prefix = "where"){
    if( is.null(.params) ){
      .params <- as.list(match.call())[-1]
    }

    sql     <- ""

    sql_value_list <- function(con, x){
      if ( any(class(x) %in% c("Date", "POSIXct" )) ){
        x <- as.character(x)
      }
      glue::glue_collapse(
        x   = DBI::sqlData(con, x),
        sep = ","
      )
    }

    if(length(.params) > 1 ){
      return(
        lapply(
          .params,
          sql_where,
          prefix = ""
        )
      )

    } else {
      var <- names(.params)[1]

      if ( length(.params[[1]]) == 1 ){

        sql_value_list <- sql_value_list(con, .params[[1]])

        sql <-
          glue::glue(
            sql,
            " {var} = {sql_value_list}"
          )
      } else {

        if ( class(.params[[1]]) %in% c("call") ){

          if ( as.character(.params[[1]][1]) == ":" ){
            .params[[1]] <- eval(.params[[1]])

            sql_value_list <- sql_value_list(con, .params[[1]])

            sql <-
              glue::glue(
                sql,
                " {var} in ({sql_value_list})"
              )
          } else {

            sql_value <- eval(parse(text = as.character(.params[[1]][3])))

            sql_value_list <- sql_value_list(con, sql_value)

            sql <-
              paste(
                as.character(.params[[1]][2]),
                gsub(
                  x           = as.character(.params[[1]][1]),
                  pattern     = "%",
                  replacement = ""
                ),
                sql_value_list
              )
          }

        } else {
          sql_value_list <- sql_value_list(con, .params[[1]])
          sql <-
            glue::glue(
              sql,
              " {var} in ({sql_value_list})"
            )
        }
      }
    }

    # return
    paste(prefix, sql)
  }

